day11：
项目名称：智能门禁系统
项目需求：
	使用rfid实现刷卡进门
项目需求分析：
	项目硬件设备：LPC11C14的开发板（Cortex M0系列的板子）
		       PC机
	软件：Keil
	          VMworkStation
	          Ubuntu
	          QT
LPC11C14提供RFID无线射频识别模块，用于刷卡
LPC11C14可控的硬件有：LED、蜂鸣器、UART、RFID
Ubuntu：提供一个Linux操作系统，可以搭建服务器
	可以运行QT客户端

需要RFID和UART开始工作，就可以在裸机开发层面上提供一个刷卡开门的基础。
必须通过UART才能获取卡内的信息，通过已有的业主门禁文件，来比对卡的信息
如果卡的信息可以在业主门禁文件中找到，意味着就可以开门。

由于LCP11C14不能很好和用户进行交互，因此需要一个图形化的用户界面。介于
这个需求，我们需要QT来搭建一个用户交互程序。

由于目前我们只做刷卡进门，但是为了项目的延展性：需要一个在Linux操作系统下
运行的服务器作为资源总调度，给QT来提供这么一个门禁服务。所以，我们需要再写
一个C的服务器：主要是用来处理QT的请求。

实现刷卡进门：
	Qt发送开门请求---------->服务器获取请求---------->通过串口读取rfid卡的信息
	服务器获取到rfid卡的信息之后-------->和业主的门禁信息文件进行比对------>成功开门，失败报警
	
配门禁卡：
	Qt发送写rfid的请求----------->服务器获取请求---------->通过串口往rfid卡中写入业主信息
	将这个信息保存到业主的门禁信息文件中

项目框架：
	M0逻辑程序：以uart为核心和led、蜂鸣器、rfid进行交互
	Linux C server：以网络和串口为核心给客户提供服务，控制M0
	QT：以用户交互界面和网络通信为核心，跟服务器进行业务处理
项目模块划分：
	M0裸机开发:(2人)
	Linux C server：(2-3人)
	QT客户端：(2人)

M0裸机开发：
	实现的功能：可以通过串口控制led和蜂鸣器，可以通过串口
		    读取rfid的内容，可以更改rfid卡的内容
	模块框架：
		1.初始化led
		2.初始化蜂鸣器
		3.初始化rfid
		4.初始化uart
		5.while(1)
		{
			循环接收uart的数据：
				判断uart的数据：
				根据uart接收到的指令来执行相应的操作
		}
		
Linux C server：
	功能：提供一个指针中转和逻辑处理
	模块开发流程：
		1.网络初始化
		2.串口初始化
		3.处理业务逻辑
		{
			接收客户端的指令：
			判断客户端的指令执行相应的操作
		}
		 
QT客户端：
	功能：提供一个用户交互的界面，提供一个跟服务器通信的平台
	模块开发：
		1.网络初始化
		2.业务处理

每一个模块牵扯的知识点：
	m0裸机开发：
		1.led
		2.bzz
		3.rfid
		4.uart
	linux c server:
		1.tcp服务的搭建
		2.字符串处理
		3.文件IO
	QT:
		1.信号和槽机制的使用
		2.QT tcp 客户端的搭建
		3.QString和QByteArray的转换

小组会议：
	1.分工
	2.协议(QT《====》server)
	        （server<====>m0）

qt 《-----------》server 《------------》m0
刷卡进门：read_rfid  r




   